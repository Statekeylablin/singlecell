# import sys

import os
import io

from setuptools import setup, find_packages, Command, Extension
from os import path

root = 'singlecell'
name = 'singlecell'
version = '0.1.0'

here = path.abspath(path.dirname(__file__))
description = ('SingleCell: A Python/Cython Package for Processing '
               'Single-Cell RNA-Seq Data.')

install_requires = [
    'genometools>=0.3.4, <1',
    'pysam>=0.11.1, <1',
    'jinja2>=2.9.5, <3',
    'pyyaml>=3.11, <4',
    'pandas>=0.20.2, <1',  # for SparseDataFrame support
    'cython>=0.25.2, <1',
    'HTSeq>=0.8.0, <1',
    'numpy>=1.7.0',
    'snakemake>=4.3.0, <5'
]

ext_modules = []
cmdclass = {}


try:
    import numpy as np
    from Cython.Distutils import build_ext
    from Cython.Compiler import Options as CythonOptions
except ImportError:
    pass
else:
    # only enable Cython line tracing if we're installing in Travis-CI!
    macros = []
    # tell setuptools to build the Cython extension
    ext_modules.append(
        Extension(root + '.indrop.reads', [root + '/indrop/reads.pyx'],
                include_dirs=[np.get_include()],
                define_macros=macros))
    ext_modules.append(
        Extension(root + '.indrop.barcodes_cython',
                [root + '/indrop/barcodes_cython.pyx'],
                include_dirs=[np.get_include()],
                define_macros=macros))
    ext_modules.append(
        Extension(root + '.indrop.expression',
                [root + '/indrop/expression.pyx'],
                include_dirs=[np.get_include()],
                define_macros=macros))

    cmdclass['build_ext'] = build_ext


# do not require installation if built by ReadTheDocs
# (we mock these modules in docs/source/conf.py)
if 'READTHEDOCS' not in os.environ or \
        os.environ['READTHEDOCS'] != 'True':
    install_requires.extend([
        #'six>=1.10.0, <2',
        #'scipy>=0.14, <1',
        #'plotly>=1.9.6, <3',
    ])
else:
    install_requires.extend([
        #'pandas>=0.13, <1',
    ])

# get long description from file
long_description = ''
with io.open(path.join(here, 'README.rst'), encoding='UTF-8') as fh:
    long_description = fh.read()


class CleanCommand(Command):
    """Removes files generated by setuptools.

    """
    # see https://github.com/trigger/trigger/blob/develop/setup.py
    user_options = []

    def initialize_options(self):
        pass

    def finalize_options(self):
        pass

    def run(self):
        error_msg = 'You must run this command in the package root!'
        if not os.getcwd() == here:
            raise OSError(error_msg)
        else:
            os.system('rm -rf ./dist ./build ./*.egg-info ')
cmdclass['clean']  = CleanCommand

setup(
    name=name,

    version=version,

    description=description,
    long_description=long_description,

    # homepage
    url='https://github.com/flo-compbio/singlecell',

    author='Florian Wagner',
    author_email='florian.wagner@nyu.edu',

    license='proprietary',

    # See https://pypi.python.org/pypi?%3Aaction=list_classifiers
    classifiers=[
        'Development Status :: 3 - Alpha',

        'Intended Audience :: Developers',
        'Intended Audience :: Science/Research',
        'Topic :: Scientific/Engineering :: Bio-Informatics',

        'License :: Other/Proprietary License',

        'Programming Language :: Python :: 3.5',
    ],

    keywords='single-cell gene expression pipeline processing',

    # packages=find_packages(exclude=['contrib', 'docs', 'tests*']),
    packages=find_packages(exclude=['docs', 'tests*']),
    # packages=find_packages(root),

    # libraries = [],

    install_requires=install_requires,

    # tests_require=[],

    extras_require={
        'docs': [
            'sphinx',
            'sphinx-rtd-theme',
            'sphinx-argparse',
            'mock',
        ],
        'tests': [
            'pytest>=3.1.2, <4',
            'pytest-cov>=2.5.1, <3',
        ],
    },

    # data
    # package_data={'genometools': ['data/RdBu_r_colormap.tsv']},
    package_data={
        'singlecell': [
            'data/*/*',
            'data/templates/*/*',
            'indrop/reads.pyx',
        ]
    },
    # data outside the package
    # data_files=[('my_data', ['data/data_file'])],

    entry_points={
        'console_scripts': [

            # inDrop scripts
            ('indrop_generate_star_index.py = '
             'singlecell.indrop.cli.generate_star_index:main'),
            ('indrop_create_config_file.py = '
             'singlecell.indrop.cli.create_config_file:main'),
            ('indrop_pipeline.py = '
             'singlecell.indrop.cli.pipeline:main'),
            ('indrop_check_pipeline.py = '
             'singlecell.indrop.cli.check_pipeline:main'),             
            #('indrop_process_reads.py = '
            # 'singlecell.indrop.cli.process_reads:main'),
            #('indrop_map_with_star.py = '
            # 'singlecell.indrop.cli.map_with_star:main'),
            #('indrop_count_barcodes_mapped.py = '
            # 'singlecell.indrop.cli.count_barcodes_mapped:main'),
            #('indrop_quantify_gene_expression.py ='
            # 'singlecell.indrop.cli.quantify_gene_expression:main'),
            #('indrop_quantify_transcript_expression.py ='
            # 'singlecell.indrop.cli.quantify_transcript_expression:main'),
            #('indrop_count_barcodes_transcriptomic.py = '
            # 'singlecell.indrop.cli.count_barcodes_transcriptomic:main'), 
        ],
    },

    ext_modules=ext_modules,
    cmdclass=cmdclass,

)
